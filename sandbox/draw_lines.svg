
<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="800" height="600" onload="init(evt)" onmousemove="draw(evt)" onmouseup="deselect()" onmousedown="select(evt)">
        <style>
		text {
		  font-size: 20px;
		  cursor: default;
		  font-family: Tahoma, Geneva, sans-serif;
		}
		.noselect {
		  -webkit-touch-callout: none; /* iOS Safari */
		  -webkit-user-select: none;   /* Chrome/Safari/Opera */
		  -khtml-user-select: none;    /* Konqueror */
		  -moz-user-select: none;      /* Firefox */
		  -ms-user-select: none;       /* Internet Explorer/Edge */
		  user-select: none;           /* Non-prefixed version, currently
		                                  not supported by any browser */
		}
       
    .disabled {
      opacity:0.3;
      cursor: default;
      pointer-events: none
    }
    .enabled {
      opacity:1.0;
      cursor: pointer;
    }
    
		.moveable{
			cursor: pointer;	
		}
		.locked {
			cursor: default;	
		}
    </style>
    <script type="text/ecmascript"><![CDATA[
        var svgDoc;
        var dotSpace = 50;
        var wallyDots = {"dot-1":50,"dot-2":150,"dot-3":250,"dot-4":350,"dot-5":450,"dot-6":550,"dot-7":650,"dot-8":750};
        var activeDots = wallyDots;
        var selectedPoint = null;
        var drawnPoints = {};
        function init(evt) {
            if ( window.svgDocument == null ) {
                svgDoc = evt.target.ownerDocument;
                var mainDocument = window.parent.document;
            }  

            for (dot in activeDots){
				var newC = document.createElementNS(document.rootElement.namespaceURI,"circle"); 
				newC.setAttributeNS(null, "cx", activeDots[dot]);  
				newC.setAttributeNS(null, "cy", "0"); 
				newC.setAttributeNS(null, "class","disabled");
				newC.setAttributeNS(null, "id", dot);
				newC.setAttributeNS(null, "r", 5);
				svgDoc.getElementById("control-dots").appendChild(newC);
			}
			resetDefaults()
        };
  		function resetDefaults(){
  			for (dot in activeDots){
  				svgDoc.getElementById(dot).setAttribute('class','disabled');
  			}
  			svgDoc.getElementById("start-over").setAttribute('class','disabled');
  			for (dot in activeDots){drawnPoints[dot]=false}
  		}

		function select(evt){
			console.log(Math.round(evt.clientX));
			selectedPoint = 1;
		}

        function imDone(){
        	svgDoc.getElementById('im-done').setAttribute('class','disabled');
        }
        
        function draw(evt){
        	if (selectedPoint === null) {return}
			for (dot in activeDots){
				if (evt.clientX > activeDots[dot]-dotSpace & evt.clientX <= activeDots[dot]+dotSpace){
					svgDoc.getElementById(dot).setAttribute('class','enabled');
					svgDoc.getElementById(dot).setAttribute('cy',evt.clientY);
					drawnPoints[dot]=true;
				}
			}
			drawLine();
        };

        function drawLine(){
        	var path = "M0,0 ";
        	for (dot in activeDots){
        		var dotEl = svgDoc.getElementById(dot);
        		var prevDot = Number(dot.split('-')[1])-1;
        		if (drawnPoints[dot] & drawnPoints['dot-'+prevDot]){
        			path = path+"L"+dotEl.getAttribute('cx')+","+dotEl.getAttribute('cy')+" ";
        		} else {
        			path = path+"M"+dotEl.getAttribute('cx')+","+dotEl.getAttribute('cy')+" ";
        		}
        		
        	}
        	svgDoc.getElementById("control-lines").setAttribute('d',path);
        }
		
        
        function deselect(){
            selectedPoint = null;
            for (dot in activeDots){
            	if (svgDoc.getElementById(dot).getAttribute('class') === 'enabled'){
            		svgDoc.getElementById("start-over").setAttribute('class','enabled');
            		svgDoc.getElementById("start-over").setAttribute('onmousedown', 'resetDefaults()')
            		return
            	}
            }
        };
    
    ]]> </script>	
	
	<g id="control-dots" fill='red'/>
	<path fill='none' stroke='black' id="control-lines" />
    <g id='buttons' transform="translate(400,540)">
		<g id='im-done' transform="translate(-180,0)">
      		<rect width="160" height="40" fill="#01b29F"/>
      		<text y="20" x="80" dy='0.33em' text-anchor='middle' class='noselect' fill="white">Finished</text>
    	</g>
   	 	<g id='start-over' transform="translate(20,0)" class='disabled'>
      		<rect width="160" height="40" fill="grey"/>
      		<text y="20" x="80" dy='0.33em' text-anchor='middle' class='noselect' fill="white">Reset</text>
      		<rect width="160" height="40" opacity="0"/>
    	</g>
    </g>
	<defs>
	    <linearGradient id="temperature" x1="0%" y1="0%" x2="0%" y2="100%">
	      <stop offset="0%" style="stop-color:rgb(200,60,50);stop-opacity:1"/>
	      <stop offset="50%" style="stop-color:rgb(240,230,125);stop-opacity:1"/>
		  <stop offset="90%" style="stop-color:rgb(28,105,180);stop-opacity:1"/>
	      <stop offset="100%" style="stop-color:rgb(28,105,180);stop-opacity:1"/>
	    </linearGradient>
		<filter id="gaus-blur">
			<feGaussianBlur stdDeviation="1" />
		</filter>
	  </defs>
</svg>